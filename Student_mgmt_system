##
# student_mgmt_system.py
# Program that manages students and their information in one system using a GUI
# SNK
# April 2025

from tkinter import *

class Student:
    """supporting class for GUI - represents student and their personal & academic details"""
    
    def __init__(self, name, age, phone_no, enrolled, subjects, gender):
        """setting up parameters for information for a student & initialse student object with provided details"""
        self.name = name
        self.age = int(age)
        self.phone_no = phone_no
        self.enrolled = enrolled == 'True'
        self.subjects = subjects.split(',')
        self.gender = gender

    
    def get_info(self):
        """Return a formatted string of a student's details"""
        
        return(f"Name: {self.name}\n"
               f"Age: {self.age}\n"
               f"Phone: {self.phone_no}\n"
               f"Enrolled: {'Enrolled' if self.enrolled else 'Not Enrolled'}\n"
               f"Subjects: {','.join(self.subjects)}\n"
               f"Gender: {self.gender}\n"
                )

#dictionary of students and associated info mapped by name        
students = {
    "Serina Boone": Student("Serina Boone", 15, "0225613607", "True", "ENG,GRA,MAT,ART,DTC", "Female"),
    "Shay Buck": Student("Shay Buck", 16, "0227668033", "True", "BIO,PHY,MAT,DTC,GRA", "Female"),
    "Roanna Pratt": Student("Roanna Pratt", 18, "0279111750", "True", "ENG,DTC,PHY,ART,MAT", "Female"),
    "Kirby Holt": Student("Kirby Holt",17,"0223665730","True","DTC,ENG,MAT,ART,BIO","Female"),
    "Shafira Foster": Student("Shafira Foster",15,"0222550335","True","GRA,ART,ENG,DTC,BIO","Female"),
    "Brett Alexander": Student("Brett Alexander",14,"0215447599","True","GRA,DTC,PHY,MAT,BIO", "Male"),
    "Porter Pierce": Student ("Porter Pierce",18, "0222259982", "True","PHY,BIO,DTC,ART,GRA", "Male"),
    "Hedy Holland": Student ("Hedy Holland",13, "0221264677", "True", "DTC,MAT,PHY,ENG,ART","Female"),
    "Ralph Bean": Student ("Ralph Bean",18,"0218800806","True","ART,ENG,MAT,DTC,GRA","Male"),
    "Mercedes Roth": Student("Mercedes Roth",15,"0228887184","True","MAT,DTC,ART,GRA,ENG","Female")
    
}


class StudentGUI:
    """Setting up GUI structure to manage student records"""
    
    def __init__(self, root):
        """intialise GUI components & layout with parameters"""
        
        self.root = root
        self.root.title("Student Management")
        self.root.geometry("400x450+200+200")

        #entry input & label
        self.entry_label = Label(root, text="Enter input:")
        self.entry_label.pack()
        self.entry_box = Entry(root)
        self.entry_box.pack()

        #output display area
        self.output_label = Label(root, text="Output:")
        self.output_label.pack()
        self.output_text = Text(root, height=10, width=50)
        self.output_text.pack()

        #buttons for functionality
        self.btn1 = Button(root, text="Show Students Above Age", command=self.show_students_above_age)
        self.btn1.pack(pady=5)
        self.btn2 = Button(root, text="Count Students in Subject", command=self.count_students_in_subject)
        self.btn2.pack(pady=5)
        self.btn3 = Button(root, text="Search Student", command=self.search_student)
        self.btn3.pack(pady=5)
        self.btn4 = Button(root, text="Add Student", command=self.add_student)
        self.btn4.pack(pady=5)
        self.btn5 = Button(root, text="Delete Student", command=self.delete_student)
        self.btn5.pack(pady=5)

    def get_entry(self):
        """getand return user input from entry field"""
        
        return self.entry_box.get().strip()
    
    def show_output(self, text):
        """Display text in output area with parameters"""
        
        self.output_text.delete("1.0", END) # clears the text box before adding new text(start at line 1, character 0 (the very beginning of the text box))END refers to the end of the current content in the widget.
        self.output_text.insert(END, text)

    def show_students_above_age(self):
        """Shows students and their info if they are older than an age entered by the user"""

        try:
            age = int(self.get_entry())
            results = [str(student.get_info()) for student in students.values() if student.age >= age]
            self.show_output("\n".join(results) if results else "No students found.")
        except ValueError:
            self.show_output("Please enter a valid age.")

    def count_students_in_subject(self):
        """Counts how many students are enrolled in a specific subject entered by the user & displays result"""

        subject = self.get_entry().upper()
        if subject:
            count = 0
            for student in students.values():
                if subject in student.subjects:
                    count += 1
            self.show_output(f"{count} students are enrolled in {subject}.")
        else:
            self.show_output("Please enter a subject.")


    def search_student(self):
        """Search for a student by name and display their information"""
        
        name = self.get_entry().title()
        student = students.get(name, None)
        self.show_output(str(student.get_info()) if student else "Student not found.")

    def add_student(self):
        """Allows a user to add a student and their info to the system"""
        input_data = self.get_entry().strip()
        parts = [p.strip() for p in input_data.split(',')]

        if len(parts) < 6:  # Ensure we have at least 6 values
            self.show_output("Enter data in format: Name,Age,Phone,Enrolled,Subjects,Gender")
            return

        # Rebuild name until we reach the age field
        name_parts = []
        while parts and not parts[0].isdigit():  # Keep taking parts until we find Age
            name_parts.append(parts.pop(0))
        name = " ".join(name_parts)  # Reconstruct full name

        if not parts:  # Ensure we still have data left
            self.show_output("Invalid input format. Missing age or other fields.")
            return

        # Extract remaining data
        age = parts.pop(0)
        if not age.isdigit():
            self.show_output("Age must be a number.")
            return

        phone = parts.pop(0)
        enrolled = parts.pop(0).lower() in ["true", "yes", "1"]
        gender = parts.pop(-1).title()  # Last value should be gender
        subjects = ",".join(parts).upper()  # Remaining are subjects

        #add to dictionary
        students[name] = Student(name, int(age), phone, enrolled, subjects, gender)
        self.show_output(f"Student {name} added successfully!")


    def delete_student(self):
        """Allows a user to delete a student and their info in the system by referencing student name"""

        name = self.get_entry().title()
        if name in students:
            del students[name]
            self.show_output("Student deleted successfully!")
        else:
            self.show_output("Student not found!")
            

if __name__ == "__main__":
    root = Tk()
    app = StudentGUI(root)
    root.mainloop()
